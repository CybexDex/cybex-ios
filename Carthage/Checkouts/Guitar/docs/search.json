{"Structs/Guitar/Chord.html#/s:6GuitarAAV5ChordO5emailA2DmF":{"name":"email","abstract":"<p>Pattern matches email addresses.</p>","parent_name":"Chord"},"Structs/Guitar/Chord.html#/s:6GuitarAAV5ChordO14firstCharacterA2DmF":{"name":"firstCharacter","abstract":"<p>Pattern matches first alphanumeric character of each word.</p>","parent_name":"Chord"},"Structs/Guitar/Chord.html#/s:6GuitarAAV5ChordO13lastCharacterA2DmF":{"name":"lastCharacter","abstract":"<p>Pattern matches last alphanumeric character of each word.</p>","parent_name":"Chord"},"Structs/Guitar/Chord.html#/s:6GuitarAAV5ChordO15nonAlphanumericA2DmF":{"name":"nonAlphanumeric","abstract":"<p>Pattern matches non-Alphanumeric characters.</p>","parent_name":"Chord"},"Structs/Guitar/Chord.html#/s:6GuitarAAV5ChordO20nonAlphanumericSpaceA2DmF":{"name":"nonAlphanumericSpace","abstract":"<p>Pattern matches non-Alphanumeric and non-Whitespace characters.</p>","parent_name":"Chord"},"Structs/Guitar.html#/s:6GuitarAAVABycfc":{"name":"init()","abstract":"<p><code>fatalError</code> occurs when using this empty initializer as Guitar must be initialized using <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Guitar.html#/s:6GuitarAAVABSS7pattern_tcfc\">init(pattern:)</a></code> or <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Guitar.html#/s:6GuitarAAVA2B5ChordO5chord_tcfc\">init(chord:)</a></code>.</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAVABSS7pattern_tcfc":{"name":"init(pattern:)","abstract":"<p>Designated Initializer for <code>Guitar</code></p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAVA2B5ChordO5chord_tcfc":{"name":"init(chord:)","abstract":"<p>Delegating Initializer for <code>Guitar</code></p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV17evaluateForRangesSays5RangeVySS5IndexVGGSS4from_So19NSRegularExpressionC7OptionsV4withtF":{"name":"evaluateForRanges(from:with:)","abstract":"<p>Evaluates a string for all instances of a regular expression pattern and returns a list of matched ranges for that string.</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV18evaluateForStringsSaySSGSS4from_So19NSRegularExpressionC7OptionsV4withtF":{"name":"evaluateForStrings(from:with:)","abstract":"<p>Evaluates a string for all instances of a regular expression pattern and returns a list of matched strings for that string.</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV4testSbSS6string_So19NSRegularExpressionC7OptionsV4withtF":{"name":"test(string:with:)","abstract":"<p>Tests a string to see if it matches the regular expression pattern.</p>","parent_name":"Guitar"},"Structs/Guitar/Chord.html":{"name":"Chord","abstract":"<p>Common Regular Expression Patterns</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV24firstCharacterOfEachWordSaySSGSS2in_tFZ":{"name":"firstCharacterOfEachWord(in:)","abstract":"<p>Returns an array containing the first letter of each word in the test string.</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV23lastCharacterOfEachWordSaySSGSS2in_tFZ":{"name":"lastCharacterOfEachWord(in:)","abstract":"<p>Returns an array containing the last letter of each word in the test string.</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV12isValidEmailSbSS5email_tFZ":{"name":"isValidEmail(email:)","abstract":"<p>Tests a string to check if it is a valid email address by using a regular expression.</p>","parent_name":"Guitar"},"Structs/Guitar.html#/s:6GuitarAAV7sanitzeS2S6string_tFZ":{"name":"sanitze(string:)","abstract":"<p>Sanitizes of a string by removing all non-Alphanumeric characters (excluding whitespaces)</p>","parent_name":"Guitar"},"Structs/Guitar.html":{"name":"Guitar"},"Extensions/String.html#/s:SS6GuitarE7isAlphaSbyF":{"name":"isAlpha()","abstract":"<p>A Boolean value indicating if all the characters are letters.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE14isAlphanumericSbyF":{"name":"isAlphanumeric()","abstract":"<p>A Boolean value indicating if all the characters are alphanumeric.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE13isCapitalizedSbyF":{"name":"isCapitalized()","abstract":"<p>A Boolean value indicating if the first characters in all of the words in the string are uppercased.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE15isDecapitalizedSbyF":{"name":"isDecapitalized()","abstract":"<p>A Boolean value indicating if the first characters in all of the words in the string are lowercased.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE12isLowercasedSbyF":{"name":"isLowercased()","abstract":"<p>A Boolean value indicating if all the characters are lowercased.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE9isNumericSbyF":{"name":"isNumeric()","abstract":"<p>A Boolean value indicating if all the characters are numbers.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE12isUppercasedSbyF":{"name":"isUppercased()","abstract":"<p>A Boolean value indicating if all the characters are uppercased.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE10camelCasedSSyF":{"name":"camelCased()","abstract":"<p>Returns a camel cased version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE11capitalizedSSyF":{"name":"capitalized()","abstract":"<p>Returns a capitalized version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE13decapitalizedSSyF":{"name":"decapitalized()","abstract":"<p>Returns a decapitalized version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE10kebabCasedSSyF":{"name":"kebabCased()","abstract":"<p>Returns the kebab cased (a.k.a. slug) version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE11pascalCasedSSyF":{"name":"pascalCased()","abstract":"<p>Returns a pascal cased version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE10snakeCasedSSyF":{"name":"snakeCased()","abstract":"<p>Returns the snake cased version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE16splitWordsByCaseSSyF":{"name":"splitWordsByCase()","abstract":"<p>Splits a string into mutliple words, delimited by uppercase letters.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE9swapCasedSSyF":{"name":"swapCased()","abstract":"<p>Returns the swap cased version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE3padSSSi6length_SS9withTokentF":{"name":"pad(length:withToken:)","abstract":"<p>Returns the center-padded version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE7padLeftSSSi6length_SS9withTokentF":{"name":"padLeft(length:withToken:)","abstract":"<p>Returns the left-padded version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE8padRightSSSi6length_SS9withTokentF":{"name":"padRight(length:withToken:)","abstract":"<p>Returns the right-padded version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE9latinizedSSyF":{"name":"latinized()","abstract":"<p>Returns the latinized version of the string without diacritics.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE14reversedStringSSyF":{"name":"reversedString()","abstract":"<p>Retuns the reversed version of the string.</p>","parent_name":"String"},"Extensions/String.html#/s:SS6GuitarE14withoutAccentsSSyF":{"name":"withoutAccents()","abstract":"<p>Returns the string without diacritics.</p>","parent_name":"String"},"Extensions/String.html":{"name":"String"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Structs.html":{"name":"Structs","abstract":"<p>The following structs are available globally.</p>"}}