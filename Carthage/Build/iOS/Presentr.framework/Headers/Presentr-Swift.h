// Generated by Apple Swift version 4.2 effective-4.1.50 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Presentr",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
@class NSCoder;

/// UIViewController subclass that displays the alert
SWIFT_CLASS("_TtC8Presentr19AlertViewController")
@interface AlertViewController : UIViewController
/// Text that will be used as the title for the alert
@property (nonatomic, copy) NSString * _Nullable titleText SWIFT_DEPRECATED_OBJC("Swift property 'AlertViewController.titleText' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Text that will be used as the body for the alert
@property (nonatomic, copy) NSString * _Nullable bodyText SWIFT_DEPRECATED_OBJC("Swift property 'AlertViewController.bodyText' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// If set to false, alert wont auto-dismiss the controller when an action is clicked. Dismissal will be up to the action’s handler. Default is true.
@property (nonatomic) BOOL autoDismiss SWIFT_DEPRECATED_OBJC("Swift property 'AlertViewController.autoDismiss' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// If autoDismiss is set to true, then set this property if you want the dismissal to be animated. Default is true.
@property (nonatomic) BOOL dismissAnimated SWIFT_DEPRECATED_OBJC("Swift property 'AlertViewController.dismissAnimated' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (void)loadView;
- (void)viewDidLoad;
- (void)didReceiveMemoryWarning;
- (void)updateViewConstraints;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




/// Class that handles animating the transition. Override this class if you want to create your own transition animation.
SWIFT_CLASS("_TtC8Presentr17PresentrAnimation")
@interface PresentrAnimation : NSObject
/// For simple transitions, override this method to calculate an initial frame for the animation. For more complex animations override beforeAnimation & performAnimation. Only override this method OR beforeAnimation & performAnimation. This method won’t even be called if you override beforeAnimation.
/// \param containerFrame The container frame for the animation.
///
/// \param finalFrame The final frame for the animation.
///
///
/// returns:
/// The initial frame.
- (CGRect)transformWithContainerFrame:(CGRect)containerFrame finalFrame:(CGRect)finalFrame SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'PresentrAnimation.transform(containerFrame:finalFrame:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8Presentr24CoverFromCornerAnimation")
@interface CoverFromCornerAnimation : PresentrAnimation
- (CGRect)transformWithContainerFrame:(CGRect)containerFrame finalFrame:(CGRect)finalFrame SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Presentr24CoverHorizontalAnimation")
@interface CoverHorizontalAnimation : PresentrAnimation
- (nonnull instancetype)initFromRight:(BOOL)fromRight OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_OBJC("Swift initializer 'CoverHorizontalAnimation.init(fromRight:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (CGRect)transformWithContainerFrame:(CGRect)containerFrame finalFrame:(CGRect)finalFrame SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Presentr22CoverVerticalAnimation")
@interface CoverVerticalAnimation : PresentrAnimation
- (CGRect)transformWithContainerFrame:(CGRect)containerFrame finalFrame:(CGRect)finalFrame SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Presentr29CoverVerticalFromTopAnimation")
@interface CoverVerticalFromTopAnimation : PresentrAnimation
- (CGRect)transformWithContainerFrame:(CGRect)containerFrame finalFrame:(CGRect)finalFrame SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC8Presentr22CrossDissolveAnimation")
@interface CrossDissolveAnimation : PresentrAnimation
@end


SWIFT_CLASS("_TtC8Presentr23FlipHorizontalAnimation")
@interface FlipHorizontalAnimation : PresentrAnimation
@end

@class UIColor;
@class UIView;

/// Main Presentr class. This is the point of entry for using the framework.
SWIFT_CLASS("_TtC8Presentr8Presentr")
@interface Presentr : NSObject
/// Radius of rounded corners for presented controller if roundCorners is true. Default is 4.
@property (nonatomic) CGFloat cornerRadius SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.cornerRadius' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Should the presented controller dismiss on background tap. Default is true.
@property (nonatomic) BOOL dismissOnTap SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.dismissOnTap' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Should the presented controller dismiss on Swipe inside the presented view controller. Default is false.
@property (nonatomic) BOOL dismissOnSwipe SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.dismissOnSwipe' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Should the presented controller use animation when dismiss on background tap or swipe. Default is true.
@property (nonatomic) BOOL dismissAnimated SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.dismissAnimated' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Color of the background. Default is Black.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.backgroundColor' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Opacity of the background. Default is 0.7.
@property (nonatomic) float backgroundOpacity SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.backgroundOpacity' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Should the presented controller blur the background. Default is false.
@property (nonatomic) BOOL blurBackground SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.blurBackground' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// The type of blur to be applied to the background. Ignored if blurBackground is set to false. Default is Dark.
@property (nonatomic) UIBlurEffectStyle blurStyle SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.blurStyle' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// A custom background view to be added on top of the regular background view.
@property (nonatomic, strong) UIView * _Nullable customBackgroundView SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.customBackgroundView' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// When a ViewController for context is set this handles what happens to a tap when it is outside the context. True will ignore tap and pass the tap to the background controller, false will handle the tap and dismiss the presented controller. Default is false.
@property (nonatomic) BOOL shouldIgnoreTapOutsideContext SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.shouldIgnoreTapOutsideContext' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Uses the ViewController’s frame as context for the presentation. Imitates UIModalPresentation.currentContext
@property (nonatomic, weak) UIViewController * _Nullable viewControllerForContext SWIFT_DEPRECATED_OBJC("Swift property 'Presentr.viewControllerForContext' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Public helper class method for creating and configuring an instance of the ‘AlertViewController’
/// \param title Title to be used in the Alert View Controller.
///
/// \param body Body of the message to be displayed in the Alert View Controller.
///
///
/// returns:
/// Returns a configured instance of ‘AlertViewController’
+ (AlertViewController * _Nonnull)alertViewControllerWithTitle:(NSString * _Nonnull)title body:(NSString * _Nonnull)body SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_OBJC("Swift method 'Presentr.alertViewController(title:body:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@class UIPresentationController;
@protocol UIViewControllerAnimatedTransitioning;

@interface Presentr (SWIFT_EXTENSION(Presentr)) <UIViewControllerTransitioningDelegate>
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
@end


@protocol UIViewControllerContextTransitioning;

@interface PresentrAnimation (SWIFT_EXTENSION(Presentr)) <UIViewControllerAnimatedTransitioning>
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext SWIFT_WARN_UNUSED_RESULT;
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
@end


/// The ‘PresentrDelegate’ protocol defines methods that you use to respond to changes from the ‘PresentrController’. All of the methods of this protocol are optional.
SWIFT_PROTOCOL("_TtP8Presentr16PresentrDelegate_")
@protocol PresentrDelegate
@optional
/// Asks the delegate if it should dismiss the presented controller on the tap of the outer chrome view.
/// Use this method to validate requirments or finish tasks before the dismissal of the presented controller.
/// After things are wrapped up and verified it may be good to dismiss the presented controller automatically so the user does’t have to close it again.
/// \param keyboardShowing Whether or not the keyboard is currently being shown by the presented view.
///
///
/// returns:
/// False if the dismissal should be prevented, otherwise, true if the dimissal should occur.
- (BOOL)presentrShouldDismissWithKeyboardShowing:(BOOL)keyboardShowing SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIViewController (SWIFT_EXTENSION(Presentr))
/// Present a view controller with a custom presentation provided by the Presentr object.
/// \param presentr Presentr object used for custom presentation.
///
/// \param viewController The view controller to be presented.
///
/// \param animated Animation setting for the presentation.
///
/// \param completion Completion handler.
///
- (void)customPresentViewController:(Presentr * _Nonnull)presentr viewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion SWIFT_DEPRECATED_OBJC("Swift method 'UIViewController.customPresentViewController(_:viewController:animated:completion:)' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
